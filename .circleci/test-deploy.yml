---
version: 2.1
orbs:
  orb-tools: circleci/orb-tools@12.1
filters: &filters
  tags:
    only: /.*/
jobs:
  command-tests:
    docker:
      - image: cimg/base:current
    parameters:
      coverage_reporter_version:
        type: string
        default: "latest"
    environment:
      COVERALLS_REPO_TOKEN: test-token
    steps:
      - checkout
      - coveralls/upload:
          dry_run: true
          verbose: true
          measure: true
      - coveralls/upload:
          dry_run: true
          verbose: true
          measure: true
          coverage_reporter_version: latest
      - coveralls/upload:
          verbose: true
          parallel: true
          coverage_file: test/main.c.gcov
          coverage_reporter_version: v0.6.9
          fail_on_error: false
      - coveralls/upload:
          dry_run: true
          verbose: true
          coverage_reporter_version: invalid-version
          fail_on_error: false
      - run:
          name: Verify coverage reporter version
          command: |
            INSTALLED_VERSION=$(./coveralls --version | awk '{print $NF}')
            EXPECTED_VERSION="<< parameters.coverage_reporter_version >>"
            GITHUB_RELEASES_URL="https://github.com/coverallsapp/coverage-reporter/releases"

            if [ "$EXPECTED_VERSION" = "latest" ]; then
              echo "The version of coverage reporter chosen was 'latest' and the version installed is $INSTALLED_VERSION."
              echo "Please check releases at $GITHUB_RELEASES_URL to ensure this is the latest release."
            elif [ "$INSTALLED_VERSION" = "$EXPECTED_VERSION" ]; then
              echo "Correct version ($EXPECTED_VERSION) installed"
            else
              echo "Version mismatch. Expected $EXPECTED_VERSION, but got $INSTALLED_VERSION"
              echo "Please check releases at $GITHUB_RELEASES_URL for available versions."
              exit 1
            fi
      - coveralls/upload:
          dry_run: true
          verbose: true
          parallel_finished: true
workflows:
  test-deploy:
    jobs:
      # Make sure to include "filters: *filters" in every test job you want to run as part of your deployment.
      - command-tests:
          filters: *filters
      - orb-tools/pack:
          filters: *filters
      - orb-tools/publish:
          orb_name: coveralls/coveralls
          vcs_type: << pipeline.project.type >>
          pub_type: production
          requires:
            - orb-tools/pack
            - command-tests
          context: publishing
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+$/

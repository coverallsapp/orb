version: 2.1

description: |
  This Orb posts your test suite's LCOV coverage data to coveralls.io for analysis, change tracking, and notifications.
  When running on Pull Request builds, a comment will be added to the PR with details about how coverage will be affected if merged.
  https://github.com/coverallsapp/orb

examples:
  coveralls_simple:
    description: >
      Build and upload to Coveralls in single job.
      Demo: https://github.com/coverallsapp/actions-demo
    usage:
      version: 2.1

      orbs:
        coveralls: coveralls/coveralls@x.y.z

      jobs:
        build:
          docker:
            - image: circleci/node:10.0.0

          steps:
            - checkout

            - run:
                name: Install and Make
                command: 'npm install && make test-coverage'

            - coveralls/upload

  coveralls_parallel:
    description: >
      Coveralls parallel build.
      'build' jobs uploads coverage, then 'done' job hits parallel complete webhook to finish the build.
      Demo: https://github.com/coverallsapp/actions-demo
    usage:
      version: 2.1

      orbs:
        coveralls: coveralls/coveralls@x.y.z

      jobs:
        build-1:
          docker:
            - image: circleci/node:10.0.0

          steps:
            - checkout

            - run:
                name: Install and Make 1
                command: 'npm install && make test-coverage-1'

            - coveralls/upload:
                parallel: true
                flag_name: Test 1

        build-2:
          docker:
            - image: circleci/node:10.0.0

          steps:
            - checkout

            - run:
                name: Install and Make 2
                command: 'npm install && make test-coverage-2'

            - coveralls/upload:
                parallel: true
                flag_name: Test 2

        done:
          docker:
            - image: circleci/node:10.0.0

          steps:
            - coveralls/upload:
                parallel_finished: true

      workflows:
        test_parallel_then_upload:
          jobs:
            - build-1
            - build-2
            - done:
                requires: [build-1, build-2]

commands:
  upload:
    parameters:
      path_to_lcov:
        description: >
          Local path to the lcov output file produced by your test suite.
          An error will be thrown if the file can't be found. This is the file that will be sent to the Coveralls API.
        type: string
        default: ./coverage/lcov.info
      token:
        description: Your Coveralls Repo token defined in your Circle's Environment Variables.
        type: env_var_name
        default: COVERALLS_REPO_TOKEN
      job_id:
        description: An id that uniquely identifies the build job
        type: env_var_name
        default: CIRCLE_WORKFLOW_ID
      flag_name:
        description: Options flag name of the job, e.g. "Unit Tests", "Integration Tests", etc.
        type: string
        default: ''
      parallel:
        description: Set to true for parallel jobs, where multiple posts to Coveralls will be performed before completing the build with `parallel_finished`.
        type: boolean
        default: false
      parallel_finished:
        description: Set to true in the final job, after the other parallel jobs steps have completed. This will send a webhook to Coveralls to set the build complete.
        type: boolean
        default: false
      coveralls_endpoint:
        description: >
          Hostname and protocol (https://<host>). Specifies a Coveralls Enterprise hostname.
          You can also define this in your Circle's Environment Variables as COVERALLS_ENDPOINT
        type: string
        default: 'https://coveralls.io'
    steps:
      - run:
          name: Upload Coverage Result To Coveralls
          command: |
            export COVERALLS_SERVICE_JOB_ID=$<< parameters.job_id >>

            if << parameters.parallel_finished >>; then
              curl "<< parameters.coveralls_endpoint >>/webhook?repo_token=$<< parameters.token >>" \
                -d "payload[build_num]=$COVERALLS_SERVICE_JOB_ID&payload[status]=done"
              exit 0
            fi

            sudo npm install -g coveralls

            if [ ! $COVERALLS_REPO_TOKEN ]; then
              export COVERALLS_REPO_TOKEN=<< parameters.token >>
            fi

            export COVERALLS_ENDPOINT=<< parameters.coveralls_endpoint >>

            export COVERALLS_FLAG_NAME="<< parameters.flag_name >>"

            if << parameters.parallel >>; then
              export COVERALLS_PARALLEL=true
            fi

            # check for lcov file presence:
            if [ ! -r << parameters.path_to_lcov >> ]; then
              echo "Please specify a valid 'path_to_lcov' parameter."
              exit 1
            fi

            cat << parameters.path_to_lcov >> | coveralls --verbose
